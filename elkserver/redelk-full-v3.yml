#
# Part of RedELK v3.0
# Modern Docker Compose configuration for full RedELK installation
#
# Changes from v2:
# - Upgraded to Docker Compose v3.8
# - ELK Stack upgraded to 8.x
# - Added comprehensive health checks
# - Added resource limits (configurable)
# - Improved service dependencies
# - Better restart policies
#
# Authors:
# - Outflank B.V. / Marc Smeets
# - Lorenzo Bernardi (@fastlorenzo)
# - RedELK v3 modernization team
#

version: "3.8"

networks:
  redelk_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  es_data:
    driver: local
  kibana_data:
    driver: local
  bloodhound_data:
    driver: local
  postgres_data:
    driver: local

services:
  #
  # Elasticsearch 8.x - Core data store
  #
  elasticsearch:
    container_name: redelk-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION:-8.11.3}
    networks:
      redelk_net:
        ipv4_address: 172.28.0.10
    ports:
      - "127.0.0.1:9200:9200"
    expose:
      - "9200"
      - "9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - ./mounts/certs:${CERTS_DIR_ES}
      - ./mounts/elasticsearch-config/jvm.options.d:/usr/share/elasticsearch/config/jvm.options.d
    environment:
      # Cluster settings
      - discovery.type=single-node
      - cluster.name=${ES_CLUSTER_NAME:-redelk-cluster}
      - node.name=${ES_NODE_NAME:-redelk-node1}
      - bootstrap.memory_lock=true
      
      # License and security
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=false
      
      # HTTP SSL/TLS
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=${CERTS_DIR_ES}/redelk-elasticsearch/redelk-elasticsearch.key
      - xpack.security.http.ssl.certificate_authorities=${CERTS_DIR_ES}/ca/ca.crt
      - xpack.security.http.ssl.certificate=${CERTS_DIR_ES}/redelk-elasticsearch/redelk-elasticsearch.crt
      - xpack.security.http.ssl.verification_mode=certificate
      
      # Transport SSL/TLS
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=${CERTS_DIR_ES}/ca/ca.crt
      - xpack.security.transport.ssl.certificate=${CERTS_DIR_ES}/redelk-elasticsearch/redelk-elasticsearch.crt
      - xpack.security.transport.ssl.key=${CERTS_DIR_ES}/redelk-elasticsearch/redelk-elasticsearch.key
      
      # Authentication
      - xpack.security.authc.realms.native.redelk.order=1
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      
      # Pass through environment variables for init script
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-redelk}
      - CERTS_DIR_ES=${CERTS_DIR_ES}
      - CERTS_DIR_KBN=${CERTS_DIR_KBN}
      - CERTS_DIR_LOGSTASH=${CERTS_DIR_LOGSTASH}
      - CREDS_kibana_system=${CREDS_kibana_system}
      - CREDS_logstash_system=${CREDS_logstash_system}
      - CREDS_redelk_ingest=${CREDS_redelk_ingest}
      - CREDS_redelk=${CREDS_redelk}
      - ES_URL=${ES_URL}
    
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    
    deploy:
      resources:
        limits:
          memory: ${ES_MEM_LIMIT:-8g}
        reservations:
          memory: ${ES_MEM_RESERVATION:-4g}
    
    healthcheck:
      test: ["CMD-SHELL", "curl -k -u elastic:${ELASTIC_PASSWORD} https://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

  #
  # Logstash 8.x - Log ingestion and parsing
  #
  logstash:
    container_name: redelk-logstash
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION:-8.11.3}
    networks:
      redelk_net:
        ipv4_address: 172.28.0.20
    ports:
      - "5044:5044"
    expose:
      - "9600"
    volumes:
      # Logstash uses 2 sets of TLS certs:
      #  1) CA and certs for external communication with redirectors and C2 servers
      - ./mounts/logstash-config/certs_inputs:${CERTS_DIR_REDELK}
      #  2) Certs for internal ELK stack communication
      - ./mounts/certs:${CERTS_DIR_LOGSTASH}
      - ./mounts/redelk-logs:/var/log/redelk
      # Logstash filter rules (can be edited for custom C2 frameworks)
      - ./mounts/logstash-config/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./mounts/logstash-config/redelk-main:/usr/share/logstash/redelk-main
    environment:
      - node.name=redelk-logstash
      - config.reload.automatic=true
      - CERTS_DIR_REDELK=${CERTS_DIR_REDELK}
      - CERTS_DIR_LOGSTASH=${CERTS_DIR_LOGSTASH}
      - CERTS_LOGSTASH_OUTPUT_CA=${CERTS_LOGSTASH_OUTPUT_CA}
      - CERTS_LOGSTASH_INPUT_KEY=${CERTS_LOGSTASH_INPUT_KEY}
      - CERTS_LOGSTASH_INPUT_CRT=${CERTS_LOGSTASH_INPUT_CRT}
      - CREDS_redelk_ingest=${CREDS_redelk_ingest}
      - XPACK_MONITORING_ENABLED=${LOGSTASH_XPACK_MONITORING_ENABLED:-false}
      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=["${ES_URL}"]
      - XPACK_MONITORING_ELASTICSEARCH_USERNAME=logstash_system
      - XPACK_MONITORING_ELASTICSEARCH_PASSWORD=${CREDS_logstash_system}
      - XPACK_MONITORING_ELASTICSEARCH_SSL_CERTIFICATE_AUTHORITY=${CERTS_LOGSTASH_OUTPUT_CA}
    
    deploy:
      resources:
        limits:
          memory: ${LOGSTASH_MEM_LIMIT:-2g}
        reservations:
          memory: ${LOGSTASH_MEM_RESERVATION:-1g}
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
    
    depends_on:
      elasticsearch:
        condition: service_healthy

  #
  # Kibana 8.x - Visualization and dashboard
  #
  kibana:
    container_name: redelk-kibana
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION:-8.11.3}
    networks:
      redelk_net:
        ipv4_address: 172.28.0.30
    ports:
      - "127.0.0.1:5601:5601"
    expose:
      - "5601"
    volumes:
      - kibana_data:/usr/share/kibana/data
      - ./mounts/certs:${CERTS_DIR_KBN}
    environment:
      - ELASTICSEARCH_HOSTS=${ES_URL}
      - XPACK_SECURITY_ENABLED=true
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${CREDS_kibana_system}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=${CERTS_DIR_KBN}/ca/ca.crt
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=${CERTS_DIR_KBN}/redelk-kibana/redelk-kibana.crt
      - SERVER_SSL_KEY=${CERTS_DIR_KBN}/redelk-kibana/redelk-kibana.key
      - SERVER_SSL_CERTIFICATEAUTHORITIES=${CERTS_DIR_KBN}/ca/ca.crt
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KBN_XPACK_ENCRYPTEDSAVEDOBJECTS}
      - SERVER_PUBLICBASEURL=https://${EXTERNAL_DOMAIN:-localhost}
      - SERVER_NAME=redelk-kibana
    
    deploy:
      resources:
        limits:
          memory: ${KIBANA_MEM_LIMIT:-2g}
        reservations:
          memory: ${KIBANA_MEM_RESERVATION:-1g}
    
    healthcheck:
      test: ["CMD-SHELL", "curl -k -f https://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
    
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy

  #
  # NGINX - Reverse proxy and TLS termination
  #
  nginx:
    container_name: redelk-nginx
    image: nginx:1.25-alpine
    networks:
      redelk_net:
        ipv4_address: 172.28.0.40
    volumes:
      - ./mounts/nginx-config:/etc/nginx/templates
      - ./mounts/redelk-www:/var/www/html
      - ${CERTS_DIR_NGINX_LOCAL}:${CERTS_DIR_NGINX}
      - ${CERTS_DIR_NGINX_CA_LOCAL}:${CERTS_DIR_NGINX_CA}
      - ./mounts/certbot/conf:/etc/letsencrypt
      - ./mounts/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
      - "8443:8443"
    environment:
      - TLS_NGINX_CRT_PATH=${TLS_NGINX_CRT_PATH}
      - TLS_NGINX_KEY_PATH=${TLS_NGINX_KEY_PATH}
      - TLS_NGINX_CA_PATH=${TLS_NGINX_CA_PATH}
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & /docker-entrypoint.d/20-envsubst-on-templates.sh; nginx -g \"daemon off;\"'"
    
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
    
    depends_on:
      kibana:
        condition: service_healthy
      jupyter:
        condition: service_started
      bloodhound:
        condition: service_started

  #
  # Certbot - Let's Encrypt certificate management
  #
  certbot:
    container_name: redelk-certbot
    image: certbot/certbot:latest
    networks:
      - redelk_net
    volumes:
      - ./mounts/certbot/conf:/etc/letsencrypt
      - ./mounts/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
    
    depends_on:
      nginx:
        condition: service_healthy

  #
  # RedELK Base - Background tasks and enrichment
  #
  base:
    container_name: redelk-base
    image: ${REDELKREPO}/redelk-base:${REDELKVERSION}
    networks:
      - redelk_net
    volumes:
      - ./mounts/redelk-config/etc/cron.d:/etc/cron.d
      - ./mounts/redelk-config/etc/redelk:/etc/redelk
      - ./mounts/redelk-logs:/var/log/redelk
      - ./mounts/redelk-ssh:/home/redelk/.ssh
      - ./mounts/redelk-www/c2logs:/var/www/html/c2logs
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_URL=${ES_URL}
    
    healthcheck:
      test: ["CMD-SHELL", "pgrep cron || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
    
    depends_on:
      elasticsearch:
        condition: service_healthy

  #
  # Jupyter - Interactive notebooks for analysis
  #
  jupyter:
    container_name: redelk-jupyter
    image: ${REDELKREPO}/redelk-jupyter:${REDELKVERSION}
    networks:
      - redelk_net
    expose:
      - "8888"
    volumes:
      - ./mounts/jupyter-workbooks:/home/jovyan/work
    environment:
      - JUPYTER_ENABLE_LAB=yes
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

  #
  # PostgreSQL - Database for BloodHound
  #
  bloodhound-postgres:
    container_name: redelk-bloodhound-postgres
    image: postgres:15-alpine
    networks:
      - redelk_net
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-bloodhound}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE:-bloodhound}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bloodhound} -d ${POSTGRES_DATABASE:-bloodhound}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

  #
  # Neo4j - Graph database for BloodHound
  #
  bloodhound-neo4j:
    container_name: redelk-bloodhound-neo4j
    image: neo4j:5.15-community
    networks:
      - redelk_net
    volumes:
      - bloodhound_data:/data
    ports:
      - "${NEO4J_WEB_PORT:-7474}:7474"
      - "${NEO4J_DB_PORT:-7687}:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_server_memory_heap_initial__size=${NEO4J_dbms_memory_heap_initial__size:-2G}
      - NEO4J_server_memory_heap_max__size=${NEO4J_dbms_memory_heap_max__size:-4G}
      - NEO4J_server_memory_pagecache_size=${NEO4J_dbms_memory_pagecache_size:-2G}
      - NEO4J_dbms_allow__upgrade=${NEO4J_ALLOW_UPGRADE:-true}
    
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
    
    depends_on:
      jupyter:
        condition: service_healthy

  #
  # BloodHound Community Edition - AD attack path analysis
  #
  bloodhound:
    container_name: redelk-bloodhound-app
    image: specterops/bloodhound:${BLOODHOUND_TAG:-latest}
    networks:
      - redelk_net
    environment:
      - bhe_disable_cypher_qc=${bhe_disable_cypher_qc:-false}
    ports:
      - "${BLOODHOUND_PORT:-8080}:8080"
    volumes:
      - ./mounts/bloodhound-config/bloodhound.config.json:/bloodhound.config.json:ro
    
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"
    
    depends_on:
      bloodhound-postgres:
        condition: service_healthy
      bloodhound-neo4j:
        condition: service_healthy


