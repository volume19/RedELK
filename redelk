#!/usr/bin/env python3
"""
RedELK Management CLI
Version 3.0.0

A command-line tool for managing RedELK operations.
"""

import os
import sys
import subprocess
import json
from pathlib import Path

# Check Python version
if sys.version_info < (3, 8):
    print("‚ùå Error: RedELK CLI requires Python 3.8 or higher")
    sys.exit(1)

# Try to import required packages
try:
    import click
    from rich.console import Console
    from rich.table import Table
    from rich import box
except ImportError:
    print("üì¶ Installing required dependencies...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "click>=8.0.0", "rich>=13.0.0"])
    import click
    from rich.console import Console
    from rich.table import Table
    from rich import box

console = Console()

# Constants
BASE_DIR = Path(__file__).parent.absolute()
ELKSERVER_DIR = BASE_DIR / "elkserver"
COMPOSE_FILE = ELKSERVER_DIR / "docker-compose.yml"
PASSWORDS_FILE = ELKSERVER_DIR / "redelk_passwords.cfg"


def run_docker_compose(command: list, capture_output=False):
    """Run docker-compose command"""
    full_cmd = ["docker-compose", "-f", str(COMPOSE_FILE)] + command
    try:
        if capture_output:
            result = subprocess.run(full_cmd, cwd=ELKSERVER_DIR, capture_output=True, text=True, check=True)
            return result.stdout
        else:
            subprocess.run(full_cmd, cwd=ELKSERVER_DIR, check=True)
            return None
    except subprocess.CalledProcessError as e:
        console.print(f"[red]‚ùå Error executing docker-compose: {e}[/red]")
        if capture_output and e.stderr:
            console.print(f"[red]{e.stderr}[/red]")
        sys.exit(1)
    except FileNotFoundError:
        console.print("[red]‚ùå docker-compose not found. Please install Docker Compose.[/red]")
        sys.exit(1)


@click.group()
@click.version_option(version="3.0.0", prog_name="RedELK CLI")
def cli():
    """
    RedELK Management CLI - Manage your Red Team SIEM
    
    Use 'redelk COMMAND --help' for more information on a specific command.
    """
    pass


@cli.command()
def status():
    """Show status of all RedELK services"""
    console.print("\n[cyan]üîç RedELK Service Status[/cyan]\n")
    try:
        output = run_docker_compose(["ps"], capture_output=True)
        console.print(output)
        
        # Check health
        health_output = subprocess.run(
            ["docker", "ps", "--filter", "name=redelk-", "--format", "{{.Names}}\t{{.Status}}"],
            capture_output=True,
            text=True
        )
        
        if health_output.returncode == 0:
            console.print("\n[cyan]Health Status:[/cyan]")
            for line in health_output.stdout.strip().split('\n'):
                if line:
                    name, status = line.split('\t')
                    if 'healthy' in status.lower():
                        console.print(f"  ‚úÖ {name}: [green]{status}[/green]")
                    elif 'unhealthy' in status.lower():
                        console.print(f"  ‚ùå {name}: [red]{status}[/red]")
                    elif 'starting' in status.lower():
                        console.print(f"  üîÑ {name}: [yellow]{status}[/yellow]")
                    else:
                        console.print(f"  ‚ö™ {name}: {status}")
    except Exception as e:
        console.print(f"[red]Error getting status: {e}[/red]")
        sys.exit(1)


@cli.command()
@click.option('--tail', '-n', default=100, help='Number of lines to show')
@click.option('--follow', '-f', is_flag=True, help='Follow log output')
@click.option('--service', '-s', help='Show logs for specific service only')
def logs(tail, follow, service):
    """View logs from RedELK services"""
    cmd = ["logs", f"--tail={tail}"]
    
    if follow:
        cmd.append("-f")
        console.print("[cyan]üìú Following logs (Ctrl+C to exit)...[/cyan]\n")
    else:
        console.print(f"[cyan]üìú Showing last {tail} lines of logs...[/cyan]\n")
    
    if service:
        cmd.append(service)
    
    run_docker_compose(cmd)


@cli.command()
def start():
    """Start all RedELK services"""
    console.print("[green]üöÄ Starting RedELK services...[/green]")
    run_docker_compose(["up", "-d"])
    console.print("[green]‚úÖ Services started successfully![/green]")


@cli.command()
def stop():
    """Stop all RedELK services"""
    console.print("[yellow]‚è∏Ô∏è  Stopping RedELK services...[/yellow]")
    run_docker_compose(["stop"])
    console.print("[yellow]‚úÖ Services stopped.[/yellow]")


@cli.command()
@click.option('--service', '-s', help='Restart specific service only')
def restart(service):
    """Restart RedELK services"""
    if service:
        console.print(f"[yellow]üîÑ Restarting {service}...[/yellow]")
        run_docker_compose(["restart", service])
    else:
        console.print("[yellow]üîÑ Restarting all RedELK services...[/yellow]")
        run_docker_compose(["restart"])
    console.print("[green]‚úÖ Restart complete![/green]")


@cli.command()
@click.confirmation_option(prompt='Are you sure you want to stop and remove all containers?')
def down():
    """Stop and remove all containers (data preserved)"""
    console.print("[red]üõë Stopping and removing containers...[/red]")
    run_docker_compose(["down"])
    console.print("[yellow]‚úÖ Containers removed. Data volumes preserved.[/yellow]")


@cli.command()
def passwords():
    """Display RedELK passwords and credentials"""
    if not PASSWORDS_FILE.exists():
        console.print("[red]‚ùå Passwords file not found. Run installation first.[/red]")
        sys.exit(1)
    
    console.print("\n[cyan]üîê RedELK Credentials[/cyan]\n")
    
    table = Table(show_header=True, header_style="bold magenta", box=box.ROUNDED)
    table.add_column("Service", style="cyan", width=20)
    table.add_column("Username", style="green", width=20)
    table.add_column("Password", style="yellow", width=40)
    
    try:
        with open(PASSWORDS_FILE) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    value = value.strip('"')
                    
                    if 'Username' in key:
                        service = key.replace('Cred', '').replace('Username', '').strip()
                        username = value
                    elif 'Password' in key:
                        service = key.replace('Cred', '').replace('Password', '').strip()
                        password = value
                        # Get corresponding username from previous line
                        table.add_row(service, username if 'username' in locals() else 'N/A', password)
        
        console.print(table)
        console.print(f"\n[dim]Full file: {PASSWORDS_FILE}[/dim]\n")
    except Exception as e:
        console.print(f"[red]Error reading passwords file: {e}[/red]")


@cli.command()
def urls():
    """Display RedELK access URLs"""
    import socket
    
    try:
        hostname = socket.getfqdn()
    except:
        hostname = 'localhost'
    
    console.print("\n[cyan]üåê RedELK Access URLs[/cyan]\n")
    
    table = Table(show_header=False, box=box.ROUNDED)
    table.add_column("Service", style="cyan bold", width=20)
    table.add_column("URL", style="green", width=50)
    
    table.add_row("Kibana Dashboard", f"https://{hostname}/")
    table.add_row("Jupyter Notebooks", f"https://{hostname}/jupyter")
    table.add_row("BloodHound", f"https://{hostname}:8443")
    table.add_row("Neo4j Browser", f"http://{hostname}:7474")
    table.add_row("", "")
    table.add_row("Logstash Input", f"{hostname}:5044")
    table.add_row("Elasticsearch API", f"https://{hostname}:9200")
    
    console.print(table)
    console.print()


@cli.command()
def health():
    """Check health of all services"""
    console.print("\n[cyan]üè• RedELK Health Check[/cyan]\n")
    
    services = [
        'redelk-elasticsearch',
        'redelk-logstash',
        'redelk-kibana',
        'redelk-nginx',
        'redelk-base',
        'redelk-jupyter',
        'redelk-bloodhound-neo4j',
        'redelk-bloodhound-postgres',
        'redelk-bloodhound-app'
    ]
    
    table = Table(show_header=True, header_style="bold magenta", box=box.ROUNDED)
    table.add_column("Service", style="cyan", width=30)
    table.add_column("Status", width=15)
    table.add_column("Health", width=15)
    
    for service in services:
        try:
            # Check if container exists and is running
            result = subprocess.run(
                ["docker", "inspect", "--format='{{.State.Status}} {{.State.Health.Status}}'", service],
                capture_output=True,
                text=True,
                timeout=5
            )
            
            if result.returncode == 0:
                output = result.stdout.strip().replace("'", "").split()
                status = output[0] if len(output) > 0 else "unknown"
                health = output[1] if len(output) > 1 else "none"
                
                # Format status
                if status == "running":
                    status_fmt = "[green]running[/green]"
                elif status == "exited":
                    status_fmt = "[red]exited[/red]"
                else:
                    status_fmt = f"[yellow]{status}[/yellow]"
                
                # Format health
                if health == "healthy":
                    health_fmt = "[green]‚úÖ healthy[/green]"
                elif health == "unhealthy":
                    health_fmt = "[red]‚ùå unhealthy[/red]"
                elif health == "starting":
                    health_fmt = "[yellow]üîÑ starting[/yellow]"
                else:
                    health_fmt = "[dim]no healthcheck[/dim]"
                
                table.add_row(service.replace('redelk-', ''), status_fmt, health_fmt)
            else:
                table.add_row(service.replace('redelk-', ''), "[red]not found[/red]", "[dim]N/A[/dim]")
        except Exception as e:
            table.add_row(service.replace('redelk-', ''), "[red]error[/red]", "[dim]N/A[/dim]")
    
    console.print(table)
    console.print()


@cli.command()
def info():
    """Display RedELK system information"""
    console.print("\n[cyan]‚ÑπÔ∏è  RedELK System Information[/cyan]\n")
    
    # Read version
    version_file = BASE_DIR / "VERSION"
    version = version_file.read_text().strip() if version_file.exists() else "Unknown"
    
    # Get Docker info
    try:
        docker_version = subprocess.run(["docker", "--version"], capture_output=True, text=True).stdout.strip()
        compose_version = subprocess.run(["docker-compose", "--version"], capture_output=True, text=True).stdout.strip()
    except:
        docker_version = "Not found"
        compose_version = "Not found"
    
    table = Table(show_header=False, box=box.ROUNDED)
    table.add_column("Property", style="cyan", width=25)
    table.add_column("Value", style="green", width=50)
    
    table.add_row("RedELK Version", version)
    table.add_row("Install Path", str(BASE_DIR))
    table.add_row("Docker Version", docker_version)
    table.add_row("Docker Compose", compose_version)
    table.add_row("Python Version", sys.version.split()[0])
    table.add_row("Config File", str(ELKSERVER_DIR / ".env"))
    table.add_row("Passwords File", str(PASSWORDS_FILE))
    
    console.print(table)
    console.print()


@cli.command()
@click.option('--errors-only', '-e', is_flag=True, help='Show only errors')
def tail(errors_only):
    """Tail logs from all services"""
    cmd = ["logs", "-f", "--tail=50"]
    
    if errors_only:
        console.print("[yellow]üìú Tailing error logs (Ctrl+C to exit)...[/yellow]\n")
        # Unfortunately can't easily filter in docker-compose, so we note it
        console.print("[dim]Showing all logs. Grep for 'ERROR' or 'error' manually if needed.[/dim]\n")
    else:
        console.print("[cyan]üìú Tailing all logs (Ctrl+C to exit)...[/cyan]\n")
    
    run_docker_compose(cmd)


@cli.command()
def ps():
    """Show detailed container information"""
    console.print("\n[cyan]üìä Container Information[/cyan]\n")
    run_docker_compose(["ps", "-a"])


@cli.command()
def top():
    """Show running processes in containers"""
    console.print("\n[cyan]üìä Container Processes[/cyan]\n")
    run_docker_compose(["top"])


@cli.command()
@click.argument('service')
def shell(service):
    """Open shell in a service container
    
    Examples:
      redelk shell elasticsearch
      redelk shell logstash
      redelk shell kibana
    """
    container_name = f"redelk-{service}"
    console.print(f"[cyan]üêö Opening shell in {container_name}...[/cyan]")
    
    try:
        subprocess.run(["docker", "exec", "-it", container_name, "/bin/bash"], check=True)
    except subprocess.CalledProcessError:
        # Try sh if bash doesn't exist
        try:
            subprocess.run(["docker", "exec", "-it", container_name, "/bin/sh"], check=True)
        except subprocess.CalledProcessError:
            console.print(f"[red]‚ùå Could not open shell in {container_name}[/red]")
            sys.exit(1)


@cli.command()
def update():
    """Update RedELK to latest version"""
    console.print("[cyan]üîÑ Updating RedELK...[/cyan]")
    
    # Pull latest code
    console.print("Pulling latest code from git...")
    try:
        subprocess.run(["git", "pull", "origin", "master"], check=True, cwd=BASE_DIR)
    except:
        console.print("[yellow]‚ö†Ô∏è  Could not pull from git. Continuing with Docker image update...[/yellow]")
    
    # Pull latest images
    console.print("Pulling latest Docker images...")
    run_docker_compose(["pull"])
    
    console.print("[green]‚úÖ Update complete! Run 'redelk restart' to apply changes.[/green]")


@cli.command()
def clean():
    """Clean up temporary files and old logs"""
    console.print("[yellow]üßπ Cleaning up...[/yellow]")
    
    # Clean Python cache
    import shutil
    for pattern in ['__pycache__', '*.pyc', '*.pyo']:
        for path in BASE_DIR.rglob(pattern):
            try:
                if path.is_dir():
                    shutil.rmtree(path)
                else:
                    path.unlink()
            except:
                pass
    
    # Clean old logs (older than 30 days)
    logs_dir = ELKSERVER_DIR / "mounts" / "redelk-logs"
    if logs_dir.exists():
        import time
        cutoff = time.time() - (30 * 86400)
        for log_file in logs_dir.glob("*.log"):
            if log_file.stat().st_mtime < cutoff:
                try:
                    log_file.unlink()
                    console.print(f"  Removed old log: {log_file.name}")
                except:
                    pass
    
    console.print("[green]‚úÖ Cleanup complete![/green]")


if __name__ == "__main__":
    cli()


